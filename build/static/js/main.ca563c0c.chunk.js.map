{"version":3,"sources":["features/music/musicSlice.js","components/Home.jsx","logo.svg","components/Navbar.jsx","App.js","app/store.js","serviceWorker.js","index.js"],"names":["api","create","baseURL","fetchSongs","createAsyncThunk","term","a","any","method","url","params","media","limit","response","data","results","musicSlice","createSlice","name","initialState","songs","status","error","reducers","extraReducers","pending","state","action","fulfilled","payload","rejected","message","actions","musicFetched","musicSearched","getAllSongs","Home","useSelector","className","map","song","span","src","artworkUrl100","alt","trackName","target","href","artistViewUrl","artistName","controls","previewUrl","trackId","Navbar","useState","setTerm","dispatch","useDispatch","logo","type","value","placeholder","onKeyDown","e","key","onChange","Title","Typography","App","fetchStatus","useEffect","size","level","configureStore","reducer","musicReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ca563c0c.chunk.js","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { create } from \"apisauce\";\r\n//use api sause to create base url\r\nconst api = create({\r\n  baseURL: \"https://itunes.apple.com\",\r\n});\r\n//initial state\r\nconst initialState = {\r\n  songs: [],\r\n  status: \"idle\",\r\n  error: null,\r\n};\r\n\r\n//createAsyncThunk for async operations\r\nexport const fetchSongs = createAsyncThunk(\"songs/fetchSongs\", async (term) => {\r\n  const response = await api.any({\r\n    //apisause to fetch URL\r\n    method: \"GET\",\r\n    url: \"/search\",\r\n    params: { term: term, media: \"music\", limit: 30 },\r\n  });\r\n  return response.data.results; //get data\r\n});\r\n//creteSlice\r\nconst musicSlice = createSlice({\r\n  name: \"songs\",\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: {\r\n    //states of fetching song\r\n    [fetchSongs.pending]: (state, action) => {\r\n      state.status = \"loading\";\r\n    },\r\n    [fetchSongs.fulfilled]: (state, action) => {\r\n      state.status = \"succeeded\";\r\n      state.songs = action.payload;\r\n    },\r\n    [fetchSongs.rejected]: (state, action) => {\r\n      state.status = \"failed\";\r\n      state.error = action.error.message;\r\n    },\r\n  },\r\n});\r\n//destructuring actions\r\nexport const { musicFetched, musicSearched } = musicSlice.actions;\r\n//returning reducer\r\nexport default musicSlice.reducer;\r\n//method to getAllSongs\r\nexport const getAllSongs = (state) => state.songs.songs;\r\n//method to get particular song\r\nexport const getSong = (state, songName) => {\r\n  fetchSongs(songName);\r\n};\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getAllSongs } from \"../features/music/musicSlice\";\r\n\r\nfunction Home() {\r\n  const songs = useSelector(getAllSongs);\r\n  return (\r\n    <div className=\"home__container\">\r\n      <div className=\"songs\">\r\n        {songs.map((song) => (\r\n          <div className=\" card\" span={6} key={song.trackId}>\r\n            <div className=\"card-header\">\r\n              <div className=\"card-img\">\r\n                <img src={song.artworkUrl100} alt=\"\" />\r\n              </div>\r\n              <div className=\"card-body\">\r\n                <p className=\"song-name\">{song.trackName}</p>\r\n                <a\r\n                  target=\"_blank\"\r\n                  href={song.artistViewUrl}\r\n                  className=\"artist-name\"\r\n                >\r\n                  {song.artistName}\r\n                </a>\r\n              </div>\r\n            </div>\r\n            <div className=\"player\">\r\n              <audio controls>\r\n                <source src={song.previewUrl} />\r\n              </audio>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","export default __webpack_public_path__ + \"static/media/logo.ee457f7a.svg\";","import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport logo from \"../logo.svg\";\r\nimport { fetchSongs } from \"../features/music/musicSlice\";\r\n\r\nfunction Navbar() {\r\n  const [term, setTerm] = useState(\"\");\r\n  const dispatch = useDispatch();\r\n  const handleSearch = (e) => {\r\n    if (e.key === \"Enter\" && term) {\r\n      dispatch(fetchSongs(term));\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"nav__container\">\r\n      <div className=\"navbar\">\r\n        <div className=\"left\">\r\n          <img src={logo} alt=\"\" />\r\n        </div>\r\n        <div className=\"right\">\r\n          <div className=\"search\">\r\n            <input\r\n              type=\"search\"\r\n              value={term}\r\n              placeholder=\"Search a song\"\r\n              onKeyDown={handleSearch}\r\n              onChange={(e) => setTerm(e.target.value)}\r\n            />\r\n            <span className=\"fas fa-search\"></span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { useEffect } from \"react\";\r\nimport { Navbar, Home } from \"./components/index\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { fetchSongs } from \"./features/music/musicSlice\";\r\nimport { Spin } from \"antd\";\r\nimport { Typography, Space } from \"antd\";\r\n\r\nimport { getAllSongs } from \"./features/music/musicSlice\";\r\n\r\nimport \"antd/dist/antd.css\";\r\n\r\nconst { Title } = Typography;\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  const songs = useSelector(getAllSongs);\r\n  //get status\r\n  const fetchStatus = useSelector((state) => state.songs.status);\r\n\r\n  useEffect(() => {\r\n    if (fetchStatus === \"idle\") {\r\n      dispatch(fetchSongs(\"a\"));\r\n    }\r\n  }, [fetchStatus, dispatch]);\r\n\r\n  return (\r\n    <div className=\"app__container\">\r\n      <Navbar />\r\n      <main>\r\n        {fetchStatus === \"loading\" && (\r\n          <div className=\"loader\">\r\n            <Spin size=\"large\" />\r\n          </div>\r\n        )}\r\n        {fetchStatus === \"succeeded\" && <Home />}\r\n        {fetchStatus === \"failed\" && (\r\n          <div className=\"loader\">\r\n            <Title type=\"danger\" level={4}>\r\n              Something went wrong... Please try again later\r\n            </Title>\r\n          </div>\r\n        )}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport musicReducer from \"../features/music/musicSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    songs: musicReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport store from \"./app/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}